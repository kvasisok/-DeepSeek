from parsers.optimized_odds import OptimizedOddsAnalyzer
from parsers.fbref_parser import parse_fbref
import plotly.express as px

def create_plots(report):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Plotly"""
    try:
        # –ì—Ä–∞—Ñ–∏–∫ —É–¥–∞—Ä–æ–≤
        fig = px.bar(
            x=['–í—Å–µ —É–¥–∞—Ä—ã', '–£–¥–∞—Ä—ã –≤ —Å—Ç–≤–æ—Ä'],
            y=[report['shots'], report['shots_on_target']],
            title=f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–¥–∞—Ä–æ–≤ (–¢–æ—á–Ω–æ—Å—Ç—å: {report["shots_on_target"]/report["shots"]:.0%})',
            labels={'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'},
            color=['–í—Å–µ —É–¥–∞—Ä—ã', '–£–¥–∞—Ä—ã –≤ —Å—Ç–≤–æ—Ä'],
            color_discrete_sequence=['#636EFA', '#00CC96']
        )
        fig.write_html("/sdcard/Download/fb_shots.html")
        
        # –ì—Ä–∞—Ñ–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—Ä–∞—Ç–∞—Ä—è
        fig = px.pie(
            values=[report['gk_save_percent'], 100-report['gk_save_percent']],
            names=['–°–µ–π–≤—ã', '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ'],
            title=f'–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—Ä–∞—Ç–∞—Ä—è: {report["gk_save_percent"]}%'
        )
        fig.write_html("/sdcard/Download/fb_gk.html")
        
        print("\n‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ /sdcard/Download/")
        print("fb_shots.html –∏ fb_gk.html")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)[:50]}")

def main():
    print("üîç –ê–Ω–∞–ª–∏–∑ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    stats = parse_fbref("https://fbref.com/en/matches/sample-url")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    analyzer = OptimizedOddsAnalyzer()
    odds = analyzer.get_odds(1369607)  # test fixture ID
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"–£–¥–∞—Ä—ã: {stats['shots']} (–í —Å—Ç–≤–æ—Ä: {stats['shots_on_target']})")
    print(f"% —Å–µ–π–≤–æ–≤: {stats['gk_save_percent']}%")
    
    if odds:
        print("\nüé≤ –õ—É—á—à–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:")
        for bet_type, values in odds.items():
            best = max(values['values'], key=lambda x: x['odd'])
            print(f"{bet_type}: {best['value']} @ {best['odd']:.2f}")
    
    create_plots(stats)

if __name__ == "__main__":
    main()
